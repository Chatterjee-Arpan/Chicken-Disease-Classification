{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-07-08T16:43:08.810316Z\",\"iopub.execute_input\":\"2025-07-08T16:43:08.810626Z\",\"iopub.status.idle\":\"2025-07-08T16:43:08.822164Z\",\"shell.execute_reply.started\":\"2025-07-08T16:43:08.810602Z\",\"shell.execute_reply\":\"2025-07-08T16:43:08.821464Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\nfrom pathlib import Path\nimport logging\n\nlogging.basicConfig(level=logging.INFO, format='[%(asctime)s]: %(message)s:')\n\nproject_name = \"Chicken-Disease\"\n\nlist_of_files = [\n    \".github/workflows/.gitkeep\",\n    f\"src/{project_name}/__init__.py\",\n    f\"src/{project_name}/components/__init__.py\",\n    f\"src/{project_name}/utils/__init__.py\",\n    f\"src/{project_name}/config/__init__.py\",\n    f\"src/{project_name}/config/configuration.py\"\n    f\"src/{project_name}/pipeline/__init__.py\",\n    f\"src/{project_name}/entity/__init__.py\",\n    f\"src/{project_name}/constants/__init__.py\",\n    \"config/config.yaml\",\n    \"dvc.yaml\",\n    \"params.yaml\",\n    \"requirements.txt\",\n    \"setup.py\",\n    \"research/trials.ipynb\"\n]\n\n\nfor filepath in list_of_files:\n    filepath = Path(filepath) #For Forward slash and Backward slash discrepency management\n    filedir, filename = os.path.split(filepath)\n\n\n    if filedir !=\"\":\n        os.makedirs(filedir, exist_ok=True)\n        logging.info(f\"Creating directory; {filedir} for the file: {filename}\")\n\n\n    if (not os.path.exists(filepath)) or (os.path.getsize(filepath)==0):\n        with open(filepath, 'w') as f:\n            pass\n            logging.info(f\"Creating empty file: {filepath}\")\n\n    else:\n        logging.info(f\"{filename} already exists\")","metadata":{"_uuid":"4c3f47b3-b085-419b-9217-5263bfa14472","_cell_guid":"47224b0b-d45f-4ddc-860a-16bf234c95a9","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-07-08T17:36:43.700011Z","iopub.execute_input":"2025-07-08T17:36:43.700278Z","iopub.status.idle":"2025-07-08T17:36:43.710196Z","shell.execute_reply.started":"2025-07-08T17:36:43.700257Z","shell.execute_reply":"2025-07-08T17:36:43.709442Z"}},"outputs":[],"execution_count":4}]}